<Layouts.app flash={@flash} current_scope={@current_scope}>
  <.header>
    Batch Book Scanner
    <:subtitle>Scan multiple books quickly with a physical barcode scanner</:subtitle>
  </.header>
  
<!-- Scanner Control Section -->
  <div class="card bg-base-200 mb-6">
    <div class="card-body">
      <div class="flex items-center justify-between mb-4">
        <div class="flex items-center gap-3">
          <.icon name="hero-computer-desktop" class="h-8 w-8 text-primary" />
          <div>
            <h3 class="card-title">Batch Scanner</h3>
            <p class="text-sm text-base-content/70">
              Automatic barcode detection - just scan any book
            </p>
          </div>
        </div>
        <div class="flex items-center gap-2">
          <div class="badge badge-success" id="scanner-status">
            <.icon name="hero-radio" class="h-3 w-3 mr-1" /> Scanner Ready
          </div>
          <div class="tooltip tooltip-left" data-tip="Scanner will automatically detect barcodes">
            <.icon name="hero-information-circle" class="h-4 w-4 text-base-content/50" />
          </div>
        </div>
      </div>
      
<!-- Scanner Input -->
      <div class="space-y-4">
        <!-- Hidden input for compatibility -->
        <input
          type="text"
          id="batch-scanner-input"
          class="sr-only"
          autocomplete="off"
          tabindex="-1"
        />
        
<!-- Media Type Selection -->
        <div class="form-control w-full">
          <label class="label">
            <span class="label-text font-medium">Default Media Type</span>
            <span class="label-text-alt text-xs">Applied to new books</span>
          </label>
          <select id="default-media-type" class="select select-bordered w-full">
            <option value="automatic" selected>Automatic (from API)</option>
            <option value="unspecified">Unspecified</option>
            <option value="hardcover">Hardcover</option>
            <option value="paperback">Paperback</option>
            <option value="audiobook">Audiobook</option>
            <option value="ebook">eBook</option>
          </select>
          <label class="label">
            <span class="label-text-alt text-xs text-base-content/60">
              "Automatic" uses API-detected format or "Unspecified" if not found
            </span>
          </label>
        </div>
        
<!-- Control Buttons -->
        <div class="flex gap-3">
          <button
            id="clear-batch-btn"
            class="btn btn-outline btn-warning"
            onclick="clearBatch()"
          >
            <.icon name="hero-trash" class="h-4 w-4 mr-2" /> Clear Batch
          </button>
        </div>
      </div>
    </div>
  </div>
  
<!-- Statistics -->
  <div class="stats shadow w-full mb-6">
    <div class="stat">
      <div class="stat-figure text-primary">
        <.icon name="hero-check-circle" class="h-8 w-8" />
      </div>
      <div class="stat-title">Books Added</div>
      <div class="stat-value text-primary" id="books-added-count">0</div>
    </div>

    <div class="stat">
      <div class="stat-figure text-warning">
        <.icon name="hero-exclamation-triangle" class="h-8 w-8" />
      </div>
      <div class="stat-title">Already Exists</div>
      <div class="stat-value text-warning" id="exists-count">0</div>
    </div>

    <div class="stat">
      <div class="stat-figure text-error">
        <.icon name="hero-x-circle" class="h-8 w-8" />
      </div>
      <div class="stat-title">Errors</div>
      <div class="stat-value text-error" id="error-count">0</div>
    </div>
  </div>
  
<!-- Batch Results -->
  <div class="card bg-base-100 border">
    <div class="card-body">
      <h3 class="card-title">
        Batch Results
        <div class="badge badge-neutral" id="total-scanned">0 scanned</div>
      </h3>

      <div id="batch-results" class="space-y-3 max-h-96 overflow-y-auto">
        <div class="text-center text-base-content/50 py-8" id="no-results">
          <.icon name="hero-inbox" class="h-12 w-12 mx-auto mb-2 opacity-50" />
          <p>No books scanned yet. Start scanning to see results here.</p>
        </div>
      </div>
    </div>
  </div>
  
<!-- Navigation -->
  <div class="mt-6 flex gap-3">
    <.link navigate={~p"/books"} class="btn btn-outline">
      <.icon name="hero-arrow-left" class="h-4 w-4 mr-2" /> Back to Library
    </.link>
    <.link navigate={~p"/books/new"} class="btn btn-outline">
      <.icon name="hero-plus" class="h-4 w-4 mr-2" /> Add Single Book
    </.link>
  </div>
</Layouts.app>

<script>
  let batchResults = [];
  let counters = {
    added: 0,
    exists: 0,
    errors: 0
  };

  function updateCounters() {
    document.getElementById('books-added-count').textContent = counters.added;
    document.getElementById('exists-count').textContent = counters.exists;
    document.getElementById('error-count').textContent = counters.errors;
    document.getElementById('total-scanned').textContent = `${batchResults.length} scanned`;
  }

  function updateScannerStatus(status, isProcessing = false) {
    const statusEl = document.getElementById('scanner-status');
    
    if (isProcessing) {
      statusEl.innerHTML = `
        <svg class="h-3 w-3 mr-1 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
        </svg>
        ${status}
      `;
      statusEl.className = 'badge badge-warning';
    } else {
      statusEl.innerHTML = `
        <svg class="h-3 w-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.111 16.404a5.5 5.5 0 017.778 0M12 20h.01m-7.08-7.071c3.904-3.905 10.236-3.905 14.141 0M1.394 9.393c5.857-5.857 15.355-5.857 21.213 0"></path>
        </svg>
        ${status}
      `;
      statusEl.className = 'badge badge-success';
    }
  }

  function addResultItem(type, data) {
    const resultsContainer = document.getElementById('batch-results');
    const noResults = document.getElementById('no-results');
    
    // Hide no results message
    if (noResults) {
      noResults.style.display = 'none';
    }

    // Create result item
    const resultItem = document.createElement('div');
    resultItem.className = 'border rounded-lg p-4';
    
    const timestamp = new Date().toLocaleTimeString();
    
    if (type === 'added') {
      resultItem.innerHTML = `
        <div class="flex items-start gap-3">
          <div class="badge badge-success badge-sm mt-1">Added</div>
          <div class="flex-1">
            <div class="font-semibold text-success">${data.book.title}</div>
            <div class="text-sm text-base-content/70">by ${data.book.author}</div>
            <div class="text-xs text-base-content/50 mt-1">
              ISBN: ${data.book.isbn} • Media: ${data.book.media_type} • ${timestamp}
            </div>
          </div>
          <div class="dropdown dropdown-end">
            <button class="btn btn-ghost btn-xs" tabindex="0">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01"></path>
              </svg>
            </button>
            <ul class="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-32 z-50">
              <li><a href="/books/${data.book.id}" class="text-xs">View Book</a></li>
            </ul>
          </div>
        </div>
      `;
      counters.added++;
    } else if (type === 'exists') {
      resultItem.innerHTML = `
        <div class="flex items-start gap-3">
          <div class="badge badge-warning badge-sm mt-1">Exists</div>
          <div class="flex-1">
            <div class="font-semibold text-warning">${data.book.title}</div>
            <div class="text-sm text-base-content/70">by ${data.book.author}</div>
            <div class="text-xs text-base-content/50 mt-1">
              ISBN: ${data.isbn} • Already in library • ${timestamp}
            </div>
          </div>
          <div class="dropdown dropdown-end">
            <button class="btn btn-ghost btn-xs" tabindex="0">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01"></path>
              </svg>
            </button>
            <ul class="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-32 z-50">
              <li><a href="/books/${data.book.id}" class="text-xs">View Book</a></li>
            </ul>
          </div>
        </div>
      `;
      counters.exists++;
    } else if (type === 'error') {
      resultItem.innerHTML = `
        <div class="flex items-start gap-3">
          <div class="badge badge-error badge-sm mt-1">Error</div>
          <div class="flex-1">
            <div class="font-semibold text-error">Scan Failed</div>
            <div class="text-sm text-base-content/70">${data.error}</div>
            <div class="text-xs text-base-content/50 mt-1">
              ${data.isbn ? `ISBN: ${data.isbn} • ` : ''}${timestamp}
            </div>
          </div>
        </div>
      `;
      counters.errors++;
    }

    // Add to beginning of results
    resultsContainer.insertBefore(resultItem, resultsContainer.firstChild);
    
    // Store in results array
    batchResults.unshift({ type, data, timestamp });
    
    // Update counters
    updateCounters();
  }

  async function processBarcode(barcode) {
    if (isProcessing) return;
    
    isProcessing = true;
    const mediaType = document.getElementById('default-media-type').value;
    const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
    
    updateScannerStatus('Processing...', true);
    showToast(`Scanning barcode: ${barcode}`, 'info');
    
    try {
      // First check if book exists
      const checkResponse = await fetch('/books/batch-check', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'X-CSRF-Token': csrfToken,
        },
        body: `barcode=${encodeURIComponent(barcode)}`
      });
      
      const checkData = await checkResponse.json();
      
      if (checkData.exists) {
        // Book already exists
        addResultItem('exists', checkData);
        showToast(`"${checkData.book.title}" already in library`, 'warning');
        updateScannerStatus('Scanner Ready');
        isProcessing = false;
        return;
      }
      
      if (checkData.error) {
        addResultItem('error', { error: checkData.error, isbn: checkData.isbn });
        showToast(`Error: ${checkData.error}`, 'error');
        updateScannerStatus('Scanner Ready');
        isProcessing = false;
        return;
      }
      
      // Book doesn't exist, try to add it
      const addResponse = await fetch('/books/batch-add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'X-CSRF-Token': csrfToken,
        },
        body: `barcode=${encodeURIComponent(barcode)}&media_type=${encodeURIComponent(mediaType)}`
      });
      
      const addData = await addResponse.json();
      
      if (addData.success) {
        addResultItem('added', addData);
        showToast(`Added "${addData.book.title}" to library!`, 'success');
      } else {
        addResultItem('error', { error: addData.error, isbn: checkData.isbn });
        showToast(`Error: ${addData.error}`, 'error');
      }
      
    } catch (error) {
      console.error('Network error:', error);
      addResultItem('error', { error: 'Network error occurred', isbn: null });
      showToast('Network error occurred', 'error');
    }
    
    updateScannerStatus('Scanner Ready');
    isProcessing = false;
  }

  // Barcode scanner state
  let barcodeBuffer = '';
  let lastKeystroke = 0;
  let isProcessing = false;

  function clearBatch() {
    if (batchResults.length === 0) return;
    
    if (confirm('Are you sure you want to clear all batch results? This cannot be undone.')) {
      batchResults = [];
      counters = { added: 0, exists: 0, errors: 0 };
      
      // Clear results display
      const resultsContainer = document.getElementById('batch-results');
      resultsContainer.innerHTML = `
        <div class="text-center text-base-content/50 py-8" id="no-results">
          <svg class="h-12 w-12 mx-auto mb-2 opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2M4 13h2m7-6v2m0 0v2m0-2h2m-2 0H9"></path>
          </svg>
          <p>No books scanned yet. Start scanning to see results here.</p>
        </div>
      `;
      
      updateCounters();
      updateScannerStatus('Scanner Ready');
    }
  }

  function showToast(message, type = 'info') {
    // Create toast element
    const toast = document.createElement('div');
    toast.className = `alert alert-${type} fixed top-4 right-4 z-50 max-w-sm animate-in slide-in-from-right duration-300`;
    toast.innerHTML = `
      <div class="flex items-center gap-2">
        ${type === 'success' ? 
          '<svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>' :
          type === 'error' ?
          '<svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>' :
          '<svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>'
        }
        <span>${message}</span>
      </div>
    `;
    
    document.body.appendChild(toast);
    
    // Remove after 4 seconds
    setTimeout(() => {
      toast.classList.add('animate-out', 'slide-out-to-right');
      setTimeout(() => toast.remove(), 300);
    }, 4000);
  }

  function isScannerInput(timeBetweenKeys) {
    // Scanner typically types 10-20 characters in under 100ms
    // Human typing is usually 200ms+ between keystrokes
    return timeBetweenKeys < 100;
  }

  function processBarcodeFromBuffer() {
    const barcode = barcodeBuffer.trim();
    if (barcode.length >= 8) { // Minimum viable barcode length
      barcodeBuffer = '';
      processBarcode(barcode);
    }
  }

  // Setup global keyboard listener for barcode detection
  function setupBatchScanner() {
    // Global keydown listener
    document.addEventListener('keydown', function(e) {
      // Ignore if processing or typing in inputs/textareas
      if (isProcessing || 
          e.target.tagName === 'INPUT' || 
          e.target.tagName === 'TEXTAREA' || 
          e.target.tagName === 'SELECT' ||
          e.target.isContentEditable) {
        return;
      }

      const currentTime = Date.now();
      const timeBetweenKeys = currentTime - lastKeystroke;
      lastKeystroke = currentTime;

      // Handle Enter key - process buffer if it looks like a barcode
      if (e.key === 'Enter') {
        e.preventDefault();
        if (barcodeBuffer.length >= 8) {
          processBarcodeFromBuffer();
        }
        return;
      }

      // Handle regular characters
      if (e.key.length === 1) {
        e.preventDefault(); // Prevent normal typing behavior
        
        // If too much time has passed, reset buffer (new scan)
        if (timeBetweenKeys > 200) {
          barcodeBuffer = '';
        }

        // Add character to buffer
        barcodeBuffer += e.key;

        // Auto-process if scanner input detected and buffer looks complete
        if (isScannerInput(timeBetweenKeys) && barcodeBuffer.length >= 10) {
          // Set a short timeout to catch any remaining characters
          setTimeout(() => {
            if (barcodeBuffer.length >= 8) {
              processBarcodeFromBuffer();
            }
          }, 50);
        }

        // Show visual feedback for scanner activity
        if (barcodeBuffer.length > 3) {
          updateScannerStatus(`Scanning... (${barcodeBuffer.length} chars)`, false);
        }
      }

      // Clear buffer after timeout (in case scan is incomplete)
      setTimeout(() => {
        if (barcodeBuffer && Date.now() - lastKeystroke > 500) {
          if (barcodeBuffer.length >= 8) {
            processBarcodeFromBuffer();
          } else {
            barcodeBuffer = '';
            updateScannerStatus('Scanner Ready');
          }
        }
      }, 600);
    });
  }

  // Initialize when page loads
  document.addEventListener('DOMContentLoaded', function() {
    setupBatchScanner();
    updateScannerStatus('Scanner Ready');
  });
</script>
