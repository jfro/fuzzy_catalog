<Layouts.app flash={@flash} current_scope={@current_scope}>
  <.header>
    Add Book to Library
    <:subtitle>Add a new book to the library or lookup from Open Library</:subtitle>
  </.header>
  
<!-- Book Lookup Section with Tabs -->
  <div class="card bg-base-200 mb-6">
    <div class="card-body">
      <h3 class="card-title">Lookup Book Information</h3>
      <p class="text-sm text-base-content/70 mb-4">
        Choose a method to search for book details and auto-fill the form below.
      </p>
      
<!-- Tab Navigation -->
      <div role="tablist" class="tabs tabs-bordered mb-4">
        <input
          type="radio"
          name="lookup_tabs"
          role="tab"
          class="tab"
          aria-label="Scan Barcode"
          id="tab-scan"
          checked
        />
        <div role="tabpanel" class="tab-content bg-base-100 border-base-300 rounded-box p-6">
          <div class="flex items-center gap-3 mb-3">
            <.icon name="hero-camera" class="h-6 w-6 text-primary" />
            <h4 class="font-semibold text-primary">Scan Barcode</h4>
          </div>
          <p class="text-sm text-base-content/70 mb-4">
            Use your camera to scan the ISBN barcode on the back of a book for instant lookup. Works with EAN-13, ISBN-10, and ISBN-13 barcodes.
          </p>
          <.button
            type="button"
            onclick="openBarcodeScanner()"
            class="btn btn-primary"
            id="scan-barcode-btn"
          >
            <.icon name="hero-qr-code" class="h-4 w-4 mr-2" /> Start Camera Scanner
          </.button>
        </div>

        <input
          type="radio"
          name="lookup_tabs"
          role="tab"
          class="tab"
          aria-label="ISBN Lookup"
          id="tab-isbn"
        />
        <div role="tabpanel" class="tab-content bg-base-100 border-base-300 rounded-box p-6">
          <.form :let={lf} for={%{}} action={~p"/books/lookup"} method="post">
            <div class="flex items-center gap-3 mb-3">
              <.icon name="hero-hashtag" class="h-6 w-6 text-primary" />
              <h4 class="font-semibold text-primary">ISBN Lookup</h4>
            </div>
            <p class="text-sm text-base-content/70 mb-4">
              Enter a 10 or 13-digit ISBN to find book information from Open Library.
            </p>
            <div class="space-y-3">
              <.input
                field={lf[:isbn]}
                type="text"
                label="ISBN (10 or 13 digits)"
                placeholder="e.g., 0451526538 or 9780451526533"
                id="isbn-input"
              />
              <.button
                type="submit"
                name="lookup_type"
                value="isbn"
                class="btn btn-primary"
              >
                <.icon name="hero-magnifying-glass" class="h-4 w-4 mr-2" /> Lookup by ISBN
              </.button>
            </div>
          </.form>
        </div>

        <input
          type="radio"
          name="lookup_tabs"
          role="tab"
          class="tab"
          aria-label="Title Search"
          id="tab-title"
        />
        <div role="tabpanel" class="tab-content bg-base-100 border-base-300 rounded-box p-6">
          <.form :let={lf} for={%{}} action={~p"/books/lookup"} method="post">
            <div class="flex items-center gap-3 mb-3">
              <.icon name="hero-book-open" class="h-6 w-6 text-primary" />
              <h4 class="font-semibold text-primary">Title Search</h4>
            </div>
            <p class="text-sm text-base-content/70 mb-4">
              Search for a book by its title to find multiple matching results.
            </p>
            <div class="space-y-3">
              <.input
                field={lf[:title]}
                type="text"
                label="Book Title"
                placeholder="e.g., Lord of the Rings"
              />
              <.button
                type="submit"
                name="lookup_type"
                value="title"
                class="btn btn-primary"
              >
                <.icon name="hero-magnifying-glass" class="h-4 w-4 mr-2" /> Search by Title
              </.button>
            </div>
          </.form>
        </div>

        <input
          type="radio"
          name="lookup_tabs"
          role="tab"
          class="tab"
          aria-label="Physical Scanner"
          id="tab-physical"
        />
        <div role="tabpanel" class="tab-content bg-base-100 border-base-300 rounded-box p-6">
          <.form for={%{}} action={~p"/books/scan"} method="post" id="scanner-form">
            <div class="flex items-center gap-3 mb-3">
              <.icon name="hero-computer-desktop" class="h-6 w-6 text-primary" />
              <h4 class="font-semibold text-primary">Physical Barcode Scanner</h4>
            </div>
            <p class="text-sm text-base-content/70 mb-4">
              Use a physical barcode scanner (keyboard emulation type). Place cursor in field below and scan any book barcode. System automatically extracts ISBN from longer EAN-13 barcodes.
            </p>
            <div class="space-y-3">
              <label class="form-control w-full">
                <div class="label">
                  <span class="label-text">Scan Barcode Here</span>
                </div>
                <input
                  type="text"
                  name="barcode"
                  id="physical-scanner-input"
                  class="input input-bordered w-full"
                  placeholder="Focus here and scan..."
                  autocomplete="off"
                  required
                />
              </label>
              <div class="text-xs text-base-content/60">
                <span class="font-medium">Tip:</span>
                Physical scanners will automatically type the barcode and submit. Ready to scan continuously!
              </div>
            </div>
          </.form>
        </div>

        <input
          type="radio"
          name="lookup_tabs"
          role="tab"
          class="tab"
          aria-label="UPC Lookup"
          id="tab-upc"
        />
        <div role="tabpanel" class="tab-content bg-base-100 border-base-300 rounded-box p-6">
          <.form :let={lf} for={%{}} action={~p"/books/lookup"} method="post">
            <div class="flex items-center gap-3 mb-3">
              <.icon name="hero-qr-code" class="h-6 w-6 text-primary" />
              <h4 class="font-semibold text-primary">UPC Barcode</h4>
            </div>
            <p class="text-sm text-base-content/70 mb-4">
              Enter a UPC barcode number to lookup book information.
            </p>
            <div class="space-y-3">
              <.input
                field={lf[:upc]}
                type="text"
                label="UPC Barcode"
                placeholder="e.g., 123456789012"
              />
              <.button
                type="submit"
                name="lookup_type"
                value="upc"
                class="btn btn-primary"
              >
                <.icon name="hero-magnifying-glass" class="h-4 w-4 mr-2" /> Lookup by UPC
              </.button>
            </div>
          </.form>
        </div>
      </div>
    </div>
  </div>
  
<!-- Barcode Scanner Modal -->
  <div id="barcode-scanner-modal" class="modal">
    <div class="modal-box max-w-4xl">
      <div class="flex justify-between items-center mb-4">
        <h3 class="font-bold text-lg">Scan Book Barcode</h3>
        <button class="btn btn-sm btn-circle btn-ghost" onclick="closeBarcodeScanner()">âœ•</button>
      </div>

      <div class="space-y-4">
        <div class="alert alert-info">
          <.icon name="hero-information-circle" class="h-5 w-5" />
          <span>
            Position the barcode within the scanning area. Make sure there's good lighting.
          </span>
        </div>

        <div id="barcode-scanner-container" class="relative bg-black rounded-lg overflow-hidden">
          <div id="barcode-scanner" class="w-full h-[600px]"></div>
          
<!-- Scanning overlay -->
          <div class="absolute inset-0 pointer-events-none">
            <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-40 border-2 border-primary border-dashed rounded-lg">
            </div>
            <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 text-white bg-black/50 px-3 py-1 rounded text-sm">
              Point ISBN barcode at center area
            </div>
            <div
              class="absolute top-4 left-4 text-white bg-black/50 px-2 py-1 rounded text-xs"
              id="debug-info"
            >
              Initializing...
            </div>
          </div>
        </div>

        <div class="flex justify-between">
          <button class="btn btn-outline" onclick="closeBarcodeScanner()">Cancel</button>
          <div class="text-sm text-base-content/70" id="scanner-status">
            Initializing camera...
          </div>
        </div>
      </div>
    </div>
  </div>
  
<!-- Lookup Results Display -->
  <%= if assigns[:lookup_results] do %>
    <div class="card bg-base-100 border border-primary mb-6">
      <div class="card-body">
        <h3 class="card-title text-primary">Lookup Results</h3>
        <%= if is_list(@lookup_results) do %>
          <div class="space-y-2">
            <%= for {book, index} <- Enum.with_index(@lookup_results) do %>
              <div class="border rounded-lg p-3 hover:bg-base-50">
                <div class="flex justify-between items-start">
                  <div>
                    <h4 class="font-semibold">{book.title}</h4>
                    <p class="text-sm text-base-content/70">by {book.author}</p>
                    <%= if book.publication_date do %>
                      <p class="text-xs text-base-content/60">
                        Published: {book.publication_date.year}
                      </p>
                    <% end %>
                  </div>
                  <.form :let={_f} for={%{}} action={~p"/books/new"} method="get">
                    <input type="hidden" name="title" value={book.title} />
                    <input type="hidden" name="author" value={book.author} />
                    <input type="hidden" name="isbn10" value={book.isbn10 || ""} />
                    <input type="hidden" name="isbn13" value={book.isbn13 || ""} />
                    <.button type="submit" class="btn btn-xs btn-outline">Use This Book</.button>
                  </.form>
                </div>
              </div>
            <% end %>
          </div>
        <% else %>
          <div class="border rounded-lg p-3">
            <h4 class="font-semibold">{@lookup_results.title}</h4>
            <p class="text-sm text-base-content/70">by {@lookup_results.author}</p>
            <%= if @lookup_results.publication_date do %>
              <p class="text-xs text-base-content/60">
                Published: {@lookup_results.publication_date.year}
              </p>
            <% end %>
            <.form :let={_f} for={%{}} action={~p"/books/new"} method="get" class="mt-2">
              <input type="hidden" name="title" value={@lookup_results.title} />
              <input type="hidden" name="author" value={@lookup_results.author} />
              <input type="hidden" name="isbn10" value={@lookup_results.isbn10 || ""} />
              <input type="hidden" name="isbn13" value={@lookup_results.isbn13 || ""} />
              <.button type="submit" class="btn btn-sm btn-primary">Use This Book</.button>
            </.form>
          </div>
        <% end %>
      </div>
    </div>
  <% end %>
  
<!-- Lookup Error Display -->
  <%= if assigns[:lookup_error] do %>
    <div class="alert alert-warning mb-6">
      <p>{@lookup_error}</p>
    </div>
  <% end %>

  <.form :let={f} for={@changeset} action={~p"/books"} id="book-form" multipart={true}>
    <%= if @changeset.action do %>
      <div class="alert alert-error mb-4">
        <p>Oops, something went wrong! Please check the errors below.</p>
      </div>
    <% end %>

    <div class="space-y-4">
      <.input field={f[:title]} type="text" label="Title" required />
      <.input field={f[:author]} type="text" label="Author" required />

      <.input
        field={f[:media_type]}
        type="select"
        label="Initial Media Type"
        options={[
          {"Unspecified", "unspecified"},
          {"Hardcover", "hardcover"},
          {"Paperback", "paperback"},
          {"Audiobook", "audiobook"},
          {"eBook", "ebook"}
        ]}
        value="unspecified"
      />

      <.input field={f[:upc]} type="text" label="UPC" />
      <.input field={f[:isbn10]} type="text" label="ISBN-10" />
      <.input field={f[:isbn13]} type="text" label="ISBN-13" />
      <.input field={f[:amazon_asin]} type="text" label="Amazon ASIN" />
      
<!-- File upload for cover image -->
      <.input
        field={f[:cover_image]}
        type="file"
        label="Upload Cover Image (optional)"
        accept="image/*"
      />

      <p class="text-xs text-gray-500 mt-1">
        Supported formats: JPG, PNG, GIF, WebP. Max size: 10MB.
      </p>
    </div>

    <div class="mt-6">
      <.button type="submit">Add to Library</.button>
    </div>
  </.form>

  <div class="mt-4">
    <.link navigate={~p"/books"} class="btn btn-outline">Back to library</.link>
  </div>
</Layouts.app>

<script>
  let barcodeScanner = null;

  function openBarcodeScanner() {
    if (!window.BarcodeScanner.isCameraSupported()) {
      alert('Camera is not supported on this device/browser.');
      return;
    }
    
    // Show modal
    const modal = document.getElementById('barcode-scanner-modal');
    modal.classList.add('modal-open');
    
    // Initialize scanner
    initBarcodeScanner();
  }

  function closeBarcodeScanner() {
    // Stop scanner if running
    if (barcodeScanner) {
      barcodeScanner.stop();
      barcodeScanner = null;
    }
    
    // Hide modal
    const modal = document.getElementById('barcode-scanner-modal');
    modal.classList.remove('modal-open');
    
    // Clear scanner container
    const scannerContainer = document.getElementById('barcode-scanner');
    scannerContainer.innerHTML = '';
  }

  async function initBarcodeScanner() {
    try {
      const statusEl = document.getElementById('scanner-status');
      statusEl.textContent = 'Initializing camera...';
      
      // Create new scanner instance
      barcodeScanner = new window.BarcodeScanner();
      
      // Set up callbacks
      barcodeScanner.onDetected((code, format) => {
        console.log('Barcode detected:', code, format);
        statusEl.textContent = `Detected: ${code}`;
        
        // Stop scanning
        barcodeScanner.stop();
        
        // Close modal
        closeBarcodeScanner();
        
        // Fill ISBN field and trigger lookup
        const isbnInput = document.getElementById('isbn-input');
        if (isbnInput) {
          isbnInput.value = code;
          
          // Auto-trigger ISBN lookup
          const form = isbnInput.closest('form');
          if (form) {
            // Create a hidden input for lookup_type
            const lookupTypeInput = document.createElement('input');
            lookupTypeInput.type = 'hidden';
            lookupTypeInput.name = 'lookup_type';
            lookupTypeInput.value = 'isbn';
            form.appendChild(lookupTypeInput);
            
            // Create a hidden input for isbn
            const isbnValueInput = document.createElement('input');
            isbnValueInput.type = 'hidden';
            isbnValueInput.name = 'isbn';
            isbnValueInput.value = code;
            form.appendChild(isbnValueInput);
            
            // Submit form
            form.submit();
          }
        }
      });
      
      barcodeScanner.onError((error) => {
        console.error('Scanner error:', error);
        statusEl.textContent = 'Camera error. Please check permissions.';
        const debugEl = document.getElementById('debug-info');
        if (debugEl) debugEl.textContent = `Error: ${error.message || error}`;
      });
      
      // Initialize and start scanning
      await barcodeScanner.init('#barcode-scanner');
      barcodeScanner.start();
      statusEl.textContent = 'Scanning for barcodes... Hold barcode steady in center area.';
      
      // Update debug info
      const debugEl = document.getElementById('debug-info');
      if (debugEl) debugEl.textContent = 'Scanner active - looking for barcodes...';
      
    } catch (error) {
      console.error('Failed to initialize scanner:', error);
      document.getElementById('scanner-status').textContent = 'Failed to start camera. Please check permissions.';
      const debugEl = document.getElementById('debug-info');
      if (debugEl) debugEl.textContent = `Init failed: ${error.message || error}`;
    }
  }

  // Cleanup when page unloads
  window.addEventListener('beforeunload', () => {
    if (barcodeScanner) {
      barcodeScanner.stop();
    }
  });

  // Physical scanner functionality
  function setupPhysicalScanner() {
    const scannerInput = document.getElementById('physical-scanner-input');
    const scannerForm = document.getElementById('scanner-form');
    const physicalTab = document.getElementById('tab-physical');
    
    if (!scannerInput || !scannerForm || !physicalTab) return;
    
    // Auto-focus when physical scanner tab is selected
    physicalTab.addEventListener('change', function() {
      if (this.checked) {
        console.log('Physical scanner tab selected');
        setTimeout(() => {
          scannerInput.focus();
          scannerInput.select();
          console.log('Scanner input focused');
        }, 100);
      }
    });
    
    // Debug input changes
    scannerInput.addEventListener('input', function() {
      console.log('Input value changed:', this.value);
      if (this.placeholder === 'Processing...') {
        this.placeholder = 'Focus here and scan...';
        this.disabled = false;
      }
    });
    
    // Handle Enter key to submit immediately
    scannerInput.addEventListener('keydown', function(e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        const barcode = this.value.trim();
        
        console.log('Enter pressed, barcode value:', barcode);
        
        if (barcode.length > 0) {
          // Show processing state
          this.placeholder = 'Processing...';
          this.disabled = true;
          
          // Create a proper form submission with the barcode value
          const formData = new FormData(scannerForm);
          formData.set('barcode', barcode);
          
          console.log('FormData contents:');
          for (let [key, value] of formData.entries()) {
            console.log(key, value);
          }
          
          // Submit using fetch to ensure data is sent correctly
          fetch(scannerForm.action, {
            method: 'POST',
            body: formData,
            headers: {
              'Accept': 'text/html'
            }
          }).then(response => {
            if (response.redirected) {
              window.location.href = response.url;
            } else {
              window.location.reload();
            }
          }).catch(error => {
            console.error('Submission error:', error);
            this.placeholder = 'Focus here and scan...';
            this.disabled = false;
          });
        } else {
          console.log('No barcode value entered');
        }
      }
    });
    
    // Auto-select all text when focused (for easy overwrite)
    scannerInput.addEventListener('focus', function() {
      this.select();
    });
  }

  // Initialize physical scanner when page loads
  document.addEventListener('DOMContentLoaded', setupPhysicalScanner);
</script>
